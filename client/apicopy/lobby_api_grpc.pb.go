// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: lobby_api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LobbyServiceClient is the client API for LobbyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LobbyServiceClient interface {
	RegisterPlayer(ctx context.Context, in *RegisterPlayerRequest, opts ...grpc.CallOption) (*RegisterPlayerResponse, error)
	LobbyStream(ctx context.Context, opts ...grpc.CallOption) (LobbyService_LobbyStreamClient, error)
}

type lobbyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLobbyServiceClient(cc grpc.ClientConnInterface) LobbyServiceClient {
	return &lobbyServiceClient{cc}
}

func (c *lobbyServiceClient) RegisterPlayer(ctx context.Context, in *RegisterPlayerRequest, opts ...grpc.CallOption) (*RegisterPlayerResponse, error) {
	out := new(RegisterPlayerResponse)
	err := c.cc.Invoke(ctx, "/api.LobbyService/RegisterPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyServiceClient) LobbyStream(ctx context.Context, opts ...grpc.CallOption) (LobbyService_LobbyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &LobbyService_ServiceDesc.Streams[0], "/api.LobbyService/LobbyStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &lobbyServiceLobbyStreamClient{stream}
	return x, nil
}

type LobbyService_LobbyStreamClient interface {
	Send(*PlayerRequest) error
	Recv() (*LobbyResponse, error)
	grpc.ClientStream
}

type lobbyServiceLobbyStreamClient struct {
	grpc.ClientStream
}

func (x *lobbyServiceLobbyStreamClient) Send(m *PlayerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lobbyServiceLobbyStreamClient) Recv() (*LobbyResponse, error) {
	m := new(LobbyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LobbyServiceServer is the server API for LobbyService service.
// All implementations must embed UnimplementedLobbyServiceServer
// for forward compatibility
type LobbyServiceServer interface {
	RegisterPlayer(context.Context, *RegisterPlayerRequest) (*RegisterPlayerResponse, error)
	LobbyStream(LobbyService_LobbyStreamServer) error
	mustEmbedUnimplementedLobbyServiceServer()
}

// UnimplementedLobbyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLobbyServiceServer struct {
}

func (UnimplementedLobbyServiceServer) RegisterPlayer(context.Context, *RegisterPlayerRequest) (*RegisterPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlayer not implemented")
}
func (UnimplementedLobbyServiceServer) LobbyStream(LobbyService_LobbyStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LobbyStream not implemented")
}
func (UnimplementedLobbyServiceServer) mustEmbedUnimplementedLobbyServiceServer() {}

// UnsafeLobbyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LobbyServiceServer will
// result in compilation errors.
type UnsafeLobbyServiceServer interface {
	mustEmbedUnimplementedLobbyServiceServer()
}

func RegisterLobbyServiceServer(s grpc.ServiceRegistrar, srv LobbyServiceServer) {
	s.RegisterService(&LobbyService_ServiceDesc, srv)
}

func _LobbyService_RegisterPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServiceServer).RegisterPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LobbyService/RegisterPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServiceServer).RegisterPlayer(ctx, req.(*RegisterPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbyService_LobbyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LobbyServiceServer).LobbyStream(&lobbyServiceLobbyStreamServer{stream})
}

type LobbyService_LobbyStreamServer interface {
	Send(*LobbyResponse) error
	Recv() (*PlayerRequest, error)
	grpc.ServerStream
}

type lobbyServiceLobbyStreamServer struct {
	grpc.ServerStream
}

func (x *lobbyServiceLobbyStreamServer) Send(m *LobbyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lobbyServiceLobbyStreamServer) Recv() (*PlayerRequest, error) {
	m := new(PlayerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LobbyService_ServiceDesc is the grpc.ServiceDesc for LobbyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LobbyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.LobbyService",
	HandlerType: (*LobbyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPlayer",
			Handler:    _LobbyService_RegisterPlayer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LobbyStream",
			Handler:       _LobbyService_LobbyStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "lobby_api.proto",
}
